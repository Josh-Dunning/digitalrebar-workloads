--- 
- debug: msg="Playbook source {{ playbook_source }} "

# debugging variables
- include: debug.yml
  when: debug

- include: ../shared/tasks/downloader.yml kube_component=kube-apiserver

- name: install | Write kube-apiserver systemd init file
  template:
    src: "kube-apiserver.service.j2"
    dest: "/etc/systemd/system/kube-apiserver.service"
  when: ansible_service_mgr == "systemd"
  notify:
    - reload kube-apiserver systemd
    - restart kube-apiserver

- name: install | Write kube-apiserver initd script
  template: src=kube-apiserver.initd.j2 dest=/etc/init.d/kube-apiserver owner=root mode=0755
  when: ansible_service_mgr in ["sysvinit","upstart"] and ansible_os_family == "Debian"
  notify: restart kube-apiserver

- name: install | Write kube-apiserver conf script
  template: src=kube-apiserver.conf.j2 dest=/etc/init/kube-apiserver.conf owner=root mode=0755
  when: ansible_service_mgr in ["sysvinit","upstart"] and ansible_os_family == "Debian"
  notify: restart kube-apiserver

- name: install | Write kube-apiserver default file
  template: src=kube-apiserver.defaults.j2 dest=/etc/default/kube-apiserver owner=root mode=0755
  when: ansible_service_mgr in ["sysvinit","upstart"] and ansible_os_family == "Debian"
  notify: restart kube-apiserver

- name: install | Authorization config file
  template:
    src: "authorization-policy.jsonl.j2"
    dest: "{{ k8s.token_dir }}/authorization-policy.jsonl"
  notify:
    - restart kube-apiserver

- name: Populate users for token auth in API
  lineinfile:
    dest: "{{ k8s.token_dir }}/known_tokens.csv"
    create: yes
    line: '{{ item.value.pass }},{{ item.key }},{{ item.value.role }}'
  with_dict: "{{ k8s.users }}"
  notify:
    - restart kube-apiserver

- name: Populate users for basic auth in API
  lineinfile:
    dest: "{{ k8s.token_dir }}/known_users.csv"
    create: yes
    line: '{{ item.value.pass }},{{ item.key }},{{ item.value.role }}'
  with_dict: "{{ k8s.users }}"
  notify:
    - restart kube-apiserver

- name: Allow apiserver to bind on both secure and insecure ports
  shell: setcap cap_net_bind_service+ep {{ bin_dir }}/kube-apiserver
  changed_when: false

- meta: flush_handlers

- name: Enable apiserver
  service:
    name: kube-apiserver
    enabled: yes

- name: wait for the apiserver to be running
  wait_for:
    port: "{{ k8s.apiserver.insecure_port }}"
    timeout: 60

