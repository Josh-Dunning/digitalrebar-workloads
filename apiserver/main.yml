--- 
# APL v2 Licensed.  Copyright RackN 2016
# Original scripts based on code from https://github.com/kubespray/kargo

- name: kubernetes-apiserver
  dest: kubernetes/bin/kube-apiserver
  version: "{{k8s.version}}"
  sha256: "{{vars['k8s.checksum'][k8s.version]['k8s.apiserver']}}"
  source_url: "{{ k8s.download_url }}/kube-apiserver"
  url: "{{ k8s.download_url }}/kube-apiserver"
  owner: "{{ k8s.user }}"
  mode: "0755"

- name: reload systemd
  command: systemctl daemon-reload
  when: ansible_service_mgr == "systemd" and restart_apimaster is defined and restart_apimaster == True

- name: reload kube-apiserver
  service:
    name: kube-apiserver
    state: restarted
    enabled: yes
  when: ( restart_apimaster is defined and restart_apimaster == True) or
        secret_changed | default(false)

- name: Enable apiserver
  service:
    name: kube-apiserver
    enabled: yes
    state: started
  when: restart_apimaster is not defined or restart_apimaster == False

- name: Copy kube-apiserver binary
  command: rsync -piu "{{ local_release_dir }}/kubernetes/bin/kube-apiserver" "{{ bin_dir }}/kube-apiserver"
  register: k8s.apiserver_copy
  changed_when: false

- name: install | Write kube-apiserver systemd init file
  template:
    src: "kube-apiserver.service.j2"
    dest: "/etc/systemd/system/kube-apiserver.service"
    backup: yes
  when: ansible_service_mgr == "systemd"
  notify: restart kube-apiserver

- name: install | Write kube-apiserver initd script
  template:
    src: "deb-kube-apiserver.initd.j2"
    dest: "/etc/init.d/kube-apiserver"
    owner: root
    mode: 0755
    backup: yes
  when: ansible_service_mgr in ["sysvinit","upstart"] and ansible_os_family == "Debian"

- name: Write kube-apiserver config file
  template:
    src: "kube-apiserver.j2"
    dest: "{{ k8s.config_dir }}/kube-apiserver.env"
    backup: yes
  notify: restart kube-apiserver

- name: Allow apiserver to bind on both secure and insecure ports
  shell: setcap cap_net_bind_service+ep {{ k8s.bin_dir }}/kube-apiserver
  changed_when: false

- meta: flush_handlers

- include: start.yml
  with_items: "{{ groups['kube-master'] }}"
  when: "{{ hostvars[item].inventory_hostname == inventory_hostname }}"

# Create kube-system namespace
- name: copy 'kube-system' namespace manifest
  copy: src=namespace.yml dest=/etc/kubernetes/kube-system-ns.yml
  run_once: yes
  when: inventory_hostname == groups['kube-master'][0]

- name: Check if kube-system exists
  command: "{{ bin_dir }}/kubectl get ns kube-system"
  register: 'kubesystem'
  changed_when: False
  failed_when: False
  run_once: yes

- name: wait for the apiserver to be running
  wait_for:
    port: "{{k8s.apiserver.insecure_port}}"
    timeout: 60

- name: Create 'kube-system' namespace
  command: "{{ bin_dir }}/kubectl create -f /etc/kubernetes/kube-system-ns.yml"
  changed_when: False
  when: kubesystem|failed and inventory_hostname == groups['kube-master'][0]

# Write manifests
- name: Write kube-controller-manager manifest
  template:
    src: manifests/kube-controller-manager.manifest.j2
    dest: "{{ k8s.manifest_dir }}/kube-controller-manager.manifest"

- name: Write kube-scheduler manifest
  template:
    src: manifests/kube-scheduler.manifest.j2
    dest: "{{ k8s.manifest_dir }}/kube-scheduler.manifest"

