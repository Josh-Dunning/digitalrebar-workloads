barclamp:
  name: kompos8
  display: Kubernetes Composed
  license: APLv2
  copyright: "RackN, 2016"
  os_support:
    # system D only!
    - ubuntu-15.04
    - ubuntu-16.04
    - centos-7.2.1511
    - redhat-7.1

wizard:
  version: 2
  name: "Kompos8 K8s"
  description: "Install Kubernetes Cluster"
  icon: "group_work"
  system_nodes: false
  create_nodes: true
  os: true
  services:
    k8s-master: odd
    k8s-node: all
  create_size:
    default: "16 GB"
    AwsProvider: "m4.large"
    GoogleProvider: "n1-standard-16"
  deployment_size:
    k8ubernetes-master: 1
    k8ubernetes-node: 3

metadata:
  playbook_scope: node
  playbook_src_paths:
    k8: https://github.com/digitalrebar/kompos8.git
  playbook_path: k8

roles:
  - name: k8s-config
    description: 'Kubernetes Config'
    icon: "group_work"
    jig: noop
    attribs:
      - name: k8s-docker-version
        description: "The version of docker to use"
        default: '1.11.2'
        schema:
          type: str
          required: true
      - name: k8s-master-network
        description: "The network of the Master nodes"
        default: 'admin'
        schema:
          type: str
          required: true
      - name: k8s-cluster_name
        description: "Kubernetes Cluster Name"
        default: "kubernetes"
        schema:
          type: str
          required: true
      - name: k8s-cluster_service_ips
        description: "The pool of service cluster IPs"
        default: '10.32.0.0/24'
        schema:
          type: str
          required: true
      - name: k8s-cluster_dns
        description: "The IP of the cluster's DNS service"
        default: '10.32.0.10'
        schema:
          type: str
          required: true
      - name: k8s-cluster_ips
        description: "The pool of cluster IPs"
        default: '10.20.0.0/16'
        schema:
          type: str
          required: true
      - name: k8s-account
        description: "Kubernetes User Account"
        default: "kube"
        schema:
          type: str
          required: true
      - name: k8s-version
        description: "The Kubernetes Version"
        default: v1.3.3
        schema:
          type: str
          required: true
      - name: k8s-strict
        description: "The Kubernetes Checksum Required"
        default: true
        schema:
          type: bool
          required: true
      - name: k8s-token_dir
        description: "The Kubernetes token/auth dir"
        default: "/etc/kubernetes"
        schema:
          type: str
          required: true
      - name: k8s-users
        description: "The default set of users for kubernetes API"
        default:
          admin:
            pass: changeme
            role: admin
          kubelet:
            pass: changeme
            role: kubelet
          scheduler:
            pass: changeme
            role: scheduler
        schema:
          type: map
          mapping:
            =:
              type: map
              mapping:
                =:
                  type: str
          required: true
      - name: k8s-log-level
        description: "The kubernetes logging level"
        default: 2
        schema:
          type: int
          required: true
      - name: k8s-apiserver-port
        description: "The secure port for the API server"
        default: 443
        schema:
          type: int
          required: true
      - name: k8s-apiserver-insecure_port
        description: "The insecure port for the API server"
        default: 8080
        schema:
          type: int
          required: true

  - name: k8s-prereqs
    description: 'Kubernetes Setup for All Roles'
    jig: ansible-playbook
    icon: "crop_free"
    flags:
      - implicit
    requires:
      - rebar-installed-node
      - k8s-config
    wants-attribs:
      - k8s-account
    metadata:
      role_role_map:
        k8s-prereqs:
          - prereqs
      role_group_map:
        k8s-prereqs:
          - prereqs
      playbook_combined_repo: true
      playbook_file: "."

  - name: k8s-master
    description: 'Kubernetes Master'
    icon: "grid_on"
    type: "BarclampCluster::ServiceRole"
    jig: noop
    preceeds:
      - k8s-kubernetes
    flags:
      - milestone
    events:
      - endpoint: inproc://role:k8s-master/on_active
        selectors:
          - event: on_active
            obj_class: role
            obj_id: k8s-master
          - event: synch_on_delete
            obj_class: role
            obj_id: k8s-master
    requires:
      - k8s-apiserver
      - k8s-scheduler
      - k8s-controller
      - k8s-kubectl
    attribs:
      - name: k8s-master-addresses
        description: "The addresses of the Master nodes"
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str
              pattern: /\[?[0-9a-f:.]*\]?:?[0-9]*/
      - name: k8s-master-hostnames
        description: "All hostnames of the Master nodes"
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str

  - name: k8s-apiserver
    description: 'Kubernetes API Server'
    jig: ansible-playbook
    icon: "photo_filter"
    flags:
      - implicit
    requires:
      - k8s-prereqs
      - k8s-config
      - cert-ca-install-root
      - cert-ca-signed-cert
      - etcd
    wants-attribs:
      - k8s-account
      - k8s-version
      - k8s-strict
      - k8s-log-level
      - k8s-cluster_service_ips
      - k8s-apiserver-port
      - k8s-apiserver-insecure_port
      - k8s-token_dir
      - k8s-users
      - k8s-master-network
      - cert-key-file
      - cert-cert-file
      - cert-root-file
      - etcd-addresses
      - etcd-client-port
    metadata:
      role_role_map:
        k8s-apiserver:
          - apiserver
      role_group_map:
        k8s-apiserver:
          - apiserver
      playbook_combined_repo: true
      playbook_file: "."
      attribute_map:
        - path: k8s/apiserver/tls_cert_file
          name: cert/cert/destination
        - path: k8s/apiserver/tls_key_file
          name: cert/key/destination
        - path: k8s/apiserver/service_account_key_file
          name: cert/key/destination
        - path: k8s/apiserver/kubelet_cert_auth
          name: cert/root/destination
        - path: k8s/apiserver/etcd_ca_file
          name: cert/root/destination
        - path: k8s/apiserver/etcd_cert_file
          name: cert/cert/destination
        - path: k8s/apiserver/etcd_key_file
          name: cert/key/destination
        - path: k8s/apiserver/count
          name: eval:count_nodes_with_role(k8s-apiserver)
        - path: etcd/port
          name: etcd_client_port
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, k8s-master-network).address

  # Assumes that it is running on the same node as the k8s-apiserver
  - name: k8s-controller
    description: 'Kubernetes Controller Server'
    jig: ansible-playbook
    icon: "remove_red_eye"
    flags:
      - implicit
    requires:
      - k8s-prereqs
      - k8s-config
      - k8s-apiserver
      - cert-ca-install-root
      - cert-ca-signed-cert
    wants-attribs:
      - k8s-version
      - k8s-strict
      - k8s-apiserver-insecure_port
      - k8s-cluster_name
      - k8s-cluster_ips
      - k8s-cluster_service_ips
      - k8s-log-level
      - k8s-master-network
      - cert-key-file
      - cert-cert-file
      - cert-root-file
    metadata:
      role_role_map:
        k8s-controller:
          - controller
      role_group_map:
        k8s-controller:
          - controller
      playbook_combined_repo: true
      playbook_file: "."
      attribute_map:
        - path: k8s/controller/service_account_key_file
          name: cert/key/destination
        - path: k8s/controller/root_ca_file
          name: cert/root/destination
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, k8s-master-network).address

  - name: k8s-scheduler
    description: 'Kubernetes Scheduler Server'
    jig: ansible-playbook
    icon: "movie_filter"
    flags:
      - implicit
    requires:
      - k8s-prereqs
      - k8s-config
      - k8s-apiserver
    wants-attribs:
      - k8s-version
      - k8s-strict
      - k8s-apiserver-insecure_port
      - k8s-log-level
      - k8s-master-network
    metadata:
      role_role_map:
        k8s-scheduler:
          - scheduler
      role_group_map:
        k8s-scheduler:
          - scheduler
      playbook_combined_repo: true
      playbook_file: "."
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, k8s-master-network).address

  - name: etcd-node
    description: "etcd clustered from retr0h"
    jig: ansible-playbook
    icon: "local_grocery_store"
    requires:
      - rebar-installed-node
      - cert-ca-install-root
      - cert-ca-signed-cert
    flags:
      - milestone
    wants-attribs:
      - cert-key-file
      - cert-cert-file
      - cert-root-file
    attribs:
      - name: etcd-client-port
        description: "Client Port for etcd cluster"
        map: 'etcd_client_port'
        default: 2379
        schema:
          type: int
          required: true
      - name: etcd-peer-port
        description: "Peer Port for etcd cluster"
        map: 'etcd_peer_port'
        default: 2380
        schema:
          type: int
          required: true
      - name: etcd-data-dir
        description: "Where etcd should store its data"
        map: 'etcd_data_dir'
        default: "/var/cache/etcd/state"
        schema:
          type: str
          required: true
      - name: etcd-url-scheme
        description: "HTTP or HTTPS for communication"
        map: 'etcd_url_scheme'
        default: "https"
        schema:
          type: str
          required: true
      - name: etcd-initial-cluster-state
        description: "Initial cluster state"
        map: 'etcd_initial_cluster_state'
        default: "new"
        schema:
          type: str
          required: true
      - name: etcd-initial-cluster-token
        description: "Initial cluster token"
        map: 'etcd_initial_cluster_token'
        default: "etcd-cluster"
        schema:
          type: str
          required: true
      # NOTE: Kubernetes works, but currentstatuses reports etcd failure.
      # https://github.com/kubernetes/kubernetes/issues/27343
      - name: etcd-use-client-certs
        description: "Should etcd use Client certs"
        map: 'etcd_client_cert_auth'
        default: true
        schema:
          type: bool
          required: true
      - name: etcd-use-peer-certs
        description: "Should etcd use Peer certs"
        map: 'etcd_peer_client_cert_auth'
        default: true
        schema:
          type: bool
          required: true
      - name: etcd-network
        description: "The network of the etcd nodes, e.g. admin category"
        map: 'etcd/network'
        default: 'admin'
        schema:
          type: str
          required: true
    metadata:
      playbook_src_paths:
        roles/etcd: https://github.com/digitalrebar/ansible-etcd
      playbook_path: "."
      playbook_file: "."
      role_role_map:
        etcd-node:
          - etcd
      role_group_map:
        etcd-node:
          - etcd
      attribute_map:
        - path: etcd_client_cert_file
          name: cert/cert/destination
        - path: etcd_client_key_file
          name: cert/key/destination
        - path: etcd_client_trusted_ca_file
          name: cert/root/destination
        - path: etcd_peer_cert_file
          name: cert/cert/destination
        - path: etcd_peer_key_file
          name: cert/key/destination
        - path: etcd_peer_trusted_ca_file
          name: cert/root/destination
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, etcd-network).address

  - name: etcd
    description: "etcd cluster service"
    jig: noop
    type: "BarclampCluster::ServiceRole"
    icon: "store"
    requires:
      - etcd-node
    flags:
      - milestone
    events:
      - endpoint: inproc://role:etcd/on_active
        selectors:
          - event: on_active
            obj_class: role
            obj_id: etcd
          - event: synch_on_delete
            obj_class: role
            obj_id: etcd
    wants-attribs:
      - etcd-client-port
      - etcd-network
    attribs:
      - name: etcd-addresses
        description: "The addresses of the etcd nodes"
        map: 'etcd/addresses'
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str
              pattern: /\[?[0-9a-f:.]*\]?:?[0-9]*/

  - name: cert-ca
    jig: role-provided
    type: "BarclampCluster::MakeCa"
    icon: account_balance
    attribs:
      - name: cert-ca-label
        description: "Label of the root CA"
        default: "k8s-ca"
        map: 'cert/label'
        schema:
          type: str
  - name: cert-ca-install-root
    jig: role-provided
    type: "BarclampCluster::InstallRootCa"
    requires:
      - cert-ca
    flags:
      - implicit
      - milestone
    wants-attribs:
      - cert-ca-label
    icon: stars
    attribs:
      - name: cert-root-file
        description: "Information about the root file"
        map: "cert/root"
        default:
          destination: "/etc/cert-root.pem"
          perm: "0644"
          user: "root"
          group: "root"
        schema:
          type: map
          mapping:
            =:
              type: str
  - name: cert-ca-signed-cert
    jig: role-provided
    type: "BarclampCluster::InstallSignedCert"
    requires:
      - cert-ca
    flags:
      - implicit
      - milestone
    wants-attribs:
      - cert-ca-label
    icon: enhanced_encryption
    attribs:
      - name: cert-cert-file
        description: "Information about the cert file"
        map: "cert/cert"
        default:
          destination: "/etc/cert.pem"
          perm: "0644"
          user: "root"
          group: "root"
        schema:
          type: map
          mapping:
            =:
              type: str
      - name: cert-key-file
        description: "Information about the key file"
        map: "cert/key"
        default:
          destination: "/etc/cert.key"
          perm: "0644"
          user: "root"
          group: "root"
        schema:
          type: map
          mapping:
            =:
              type: str

  - name: k8s-worker
    description: 'Kubernetes Worker'
    icon: "work"
    type: "BarclampCluster::ServiceRole"
    jig: noop
    flags:
      - milestone
    events:
      - endpoint: inproc://role:k8s-worker/on_active
        selectors:
          - event: on_active
            obj_class: role
            obj_id: k8s-worker
          - event: synch_on_delete
            obj_class: role
            obj_id: k8s-worker
    requires:
      - k8s-kubelet
      - k8s-proxy
      - k8s-kubectl
    preceeds:
      - k8s-kubernetes
    attribs:
      - name: k8s-worker-addresses
        description: "The addresses of the Master nodes"
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str
              pattern: /\[?[0-9a-f:.]*\]?:?[0-9]*/
      - name: k8s-worker-hostnames
        description: "All hostnames of the Master nodes"
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str

  - name: k8s-kubelet
    description: 'Kubernetes Kubelet'
    jig: ansible-playbook
    # XXX: Need icon
    icon: "photo_filter"
    flags:
      - implicit
    requires:
      - k8s-prereqs
      - k8s-config
      - k8s-master
      - k8s-docker
      - cert-ca-install-root
      - cert-ca-signed-cert
    wants-attribs:
      - k8s-version
      - k8s-strict
      - k8s-log-level
      - k8s-cluster_name
      - k8s-cluster_dns
      - k8s-users
      - k8s-master-network
      - k8s-apiserver-port
      - k8s-master-addresses
      - cert-key-file
      - cert-cert-file
      - cert-root-file
    metadata:
      role_role_map:
        k8s-kubelet:
          - kubelet
      role_group_map:
        k8s-kubelet:
          - kubelet
      playbook_combined_repo: true
      playbook_file: "."
      attribute_map:
        - path: k8s/kubelet/key_file
          name: cert/key/destination
        - path: k8s/kubelet/cert_file
          name: cert/cert/destination
        - path: k8s/kubelet/ca_file
          name: cert/root/destination
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, k8s-master-network).address

  - name: k8s-proxy
    description: 'Kubernetes Proxy'
    jig: ansible-playbook
    # XXX: Need icon
    icon: "photo_filter"
    flags:
      - implicit
    requires:
      - k8s-prereqs
      - k8s-config
      - k8s-kubelet
    wants-attribs:
      - k8s-version
      - k8s-strict
      - k8s-apiserver-port
      - k8s-master-addresses
      - k8s-log-level
      - k8s-master-network
    metadata:
      role_role_map:
        k8s-proxy:
          - proxy
      role_group_map:
        k8s-proxy:
          - proxy
      playbook_combined_repo: true
      playbook_file: "."
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, k8s-master-network).address

  - name: k8s-docker
    description: 'Kubernetes Docker'
    jig: ansible-playbook
    # XXX: Need icon
    icon: "photo_filter"
    flags:
      - implicit
    requires:
      - k8s-config
    wants-attribs:
      - k8s-docker-version
      - use-proxy
      - proxy-servers
    metadata:
      role_role_map:
        k8s-docker:
          - docker
      role_group_map:
        k8s-docker:
          - docker
      playbook_combined_repo: true
      playbook_file: "."
      attribute_map:
        - path: http_proxy
          name: rebar/proxy/servers[0]/url
          when: rebar/providers/use_proxy == true
        - path: https_proxy
          name: rebar/proxy/servers[0]/url
          when: rebar/providers/use_proxy == true

  - name: k8s-kubectl
    description: 'Kubernetes Kubectl'
    jig: ansible-playbook
    # XXX: Need icon
    icon: "photo_filter"
    flags:
      - implicit
    requires:
      - k8s-config
    wants-attribs:
      - k8s-version
      - k8s-strict
    metadata:
      role_role_map:
        k8s-kubectl:
          - kubectl
      role_group_map:
        k8s-kubectl:
          - kubectl
      playbook_combined_repo: true
      playbook_file: "."


  - name: k8s-kubernetes
    description: 'Kubernetes'
    jig: noop
    # XXX: Need icon
    icon: "photo_filter"

  - name: k8s-dns
    description: 'Kubernetes DNS'
    jig: ansible-playbook
    # XXX: Need icon
    icon: "photo_filter"
    flags:
      - milestone
    requires:
      - k8s-config
      - k8s-kubernetes
    wants-attribs:
      - k8s-cluster_dns
    metadata:
      role_role_map:
        k8s-dns:
          - dns
      role_group_map:
        k8s-dns:
          - dns
      playbook_combined_repo: true
      playbook_file: "."

