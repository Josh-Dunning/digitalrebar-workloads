barclamp:
  name: kompos8
  display: Kubernetes Composed
  license: APLv2
  copyright: "RackN, 2016"
  os_support:
    # system D only!
    - ubuntu-15.04
    - ubuntu-16.04
    - centos-7.2.1511
    - redhat-7.1

wizard:
  version: 2
  name: "Kompos8 K8s"
  description: "Install Kubernetes Cluster"
  icon: "group_work"
  system_nodes: false
  create_nodes: true
  os: true
  services:
    k8s-master: odd
    k8s-node: all
  create_size:
    default: "16 GB"
    AwsProvider: "m4.large"
    GoogleProvider: "n1-standard-16"
  deployment_size:
    k8ubernetes-master: 1
    k8ubernetes-node: 3

metadata:
  playbook_scope: node
  playbook_src_paths:
    k8: https://github.com/digitalrebar/kompos8.git
  playbook_path: k8

roles:
  - name: k8s-master
    description: 'Kubernetes Master'
    icon: "grid_on"
    type: "BarclampCluster::ServiceRole"
    jig: noop
    flags:
      - milestone
    events:
      - endpoint: inproc://role:k8s-master/on_active
        selectors:
          - event: on_active
            obj_class: role
            obj_id: k8s-master
          - event: synch_on_delete
            obj_class: role
            obj_id: k8s-master
    requires:
      - k8s-apiserver
      #- k8s-scheduler
      #- k8s-controller
    attribs:
      - name: k8s-master-network
        description: "The network of the Master nodes"
        map: 'k8s/master/network'
        default: 'node-control-address'
      - name: k8s-master-addresses
        description: "The addresses of the Master nodes"
        map: 'k8s/master/addresses'
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str
              pattern: /\[?[0-9a-f:.]*\]?:?[0-9]*/
      - name: k8s-master-hostnames
        description: "All hostnames of the Master nodes"
        map: 'k8s/master/hostnames'
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str

  - name: k8s-prereqs
    description: 'Kubernetes Setup for All Roles'
    jig: ansible-playbook
    icon: "crop_free"
    flags:
      - implicit
    requires:
      - rebar-installed-node
      #- k8s-certs
    metadata:
      role_role_map:
        k8s-prereqs:
          - prereqs
      playbook_combined_repo: true
      playbook_file: roles/prereqs/tasks/main.yml
    attribs:
      - name: k8s-account
        description: "Kubernetes User Account"
        map: 'k8s\account'
        default: "kube"
        schema:
          type: str
          required: true
      - name: k8s-version
        description: "The Kubernetes Version"
        map: 'k8s\version'
        default: v1.3.3
        schema:
          type: str
          required: true
      - name: k8s-strict
        description: "The Kubernetes Checksum Required"
        map: 'k8s\strict'
        default: true
        schema:
          type: bool
          required: true

# master roles

  - name: k8s-apiserver
    description: 'Kubernetes API Server'
    jig: ansible-playbook
    icon: "photo_filter"
    flags:
      - cluster
      - implicit
    requires:
      - k8s-prereqs
      #- k8s-ca
      #- k8s-ca-install-root
      #- etcd
    wants-attribs:
      - cluster-name
      - k8s-account
      #- etcd-addresses
      #- etcd-port
    metadata:
      role_role_map:
        k8s-apiserver:
          - apiserver
      playbook_combined_repo: true
      playbook_file: roles/apiserver/tasks/main.yml
    attribs:
      - name: k8s-users
        description: "The default set of users for kubernetes API"
        map: 'k8s\users'
        default:
          kube:
            pass: changeme
            role: admin
        schema:
          type: map
          mapping:
            =:
              type: map
              mapping:
                =:
                  type: str
          required: true
      - name: k8s-log-level
        description: "The kubernetes logging level"
        map: 'k8s\log\level'
        default: 2
        schema:
          type: int
          required: true
      - name: k8s-apiserver-port
        description: "The secure port for the API server"
        map: 'k8s\apiserver\port'
        default: 443
        schema:
          type: int
          required: true
      - name: k8s-apiserver_insecure_port
        description: "The insecure port for the API server"
        map: 'k8s\apiserver\insecure_port'
        default: 8080
        schema:
          type: int
          required: true


  - name: etcd-config
    description: "etcd config for cluster"
    jig: noop
    icon: "layers"
    requires:
      - rebar-installed-node
    attribs:
      - name: etcd-client-port
        description: "Client Port for etcd cluster"
        map: 'etcd_client_port'
        default: 2379
        schema:
          type: int
          required: true
      - name: etcd-peer-port
        description: "Peer Port for etcd cluster"
        map: 'etcd_peer_port'
        default: 2380
        schema:
          type: int
          required: true
      - name: etcd-url-scheme
        description: "HTTP or HTTPS for communication"
        map: 'etcd_url_scheme'
        default: "https"
        schema:
          type: str
          required: true
      - name: etcd-initial-cluster-state
        description: "Initial cluster state"
        map: 'etcd_initial_cluster_state'
        default: "new"
        schema:
          type: str
          required: true
      - name: etcd-initial-cluster-token
        description: "Initial cluster token"
        map: 'etcd_initial_cluster_token'
        default: "etcd-cluster"
        schema:
          type: str
          required: true
      - name: etcd-use-client-certs
        description: "Should etcd use Client certs"
        map: 'etcd_client_cert_auth'
        default: true
        schema:
          type: bool
          required: true
      - name: etcd-client-cert-file
        description: "Client connection cert file"
        map: 'etcd_client_cert_file'
        default: "/etc/etcd/etcd-client.cert"
        schema:
          type: str
          required: true
      - name: etcd-client-key-file
        description: "Client connection key file"
        map: 'etcd_client_key_file'
        default: "/etc/etcd/etcd-client.key"
        schema:
          type: str
          required: true
      - name: etcd-client-ca-file
        description: "Client connection ca file"
        map: 'etcd_client_trusted_ca_file'
        default: "/etc/etcd/etcd-trusted-client.pem"
        schema:
          type: str
          required: true
      - name: etcd-use-peer-certs
        description: "Should etcd use Peer certs"
        map: 'etcd_peer_client_cert_auth'
        default: true
        schema:
          type: bool
          required: true
      - name: etcd-peer-cert-file
        description: "Peer connection cert file"
        map: 'etcd_peer_cert_file'
        default: "/etc/etcd/etcd-peer.cert"
        schema:
          type: str
          required: true
      - name: etcd-peer-key-file
        description: "Peer connection key file"
        map: 'etcd_peer_key_file'
        default: "/etc/etcd/etcd-peer.key"
        schema:
          type: str
          required: true
      - name: etcd-peer-ca-file
        description: "Peer connection ca file"
        map: 'etcd_peer_trusted_ca_file'
        default: "/etc/etcd/etcd-trusted-peer.pem"
        schema:
          type: str
          required: true
      - name: etcd-network
        description: "The network of the etcd nodes, e.g. admin category"
        map: 'etcd/network'
        default: 'admin'
        schema:
          type: str
          required: true


  - name: etcd-node
    description: "etcd clustered from retr0h"
    jig: ansible-playbook
    icon: "local_grocery_store"
    preceeds:
      - etcd
    requires:
      - rebar-installed-node
      - etcd-config
    flags:
      - implicit
      - milestone
    wants-attribs:
      - etcd-client-port
      - etcd-peer-port
      - etcd-url-scheme
      - etcd-initial-cluster-state
      - etcd-initial-cluster-token
      - etcd-use-client-certs
      - etcd-client-cert-file
      - etcd-client-key-file
      - etcd-client-ca-file
      - etcd-use-peer-certs
      - etcd-peer-cert-file
      - etcd-peer-key-file
      - etcd-peer-ca-file
      - etcd-network
    metadata:
      playbook_src_paths:
        roles/etcd: https://github.com/digitalrebar/ansible-etcd
      playbook_path: "."
      playbook_file: "."
      role_role_map:
        etcd-node:
          - etcd
      role_group_map:
        etcd-node:
          - etcd
      inventory_map:
        - path: ip
          name: eval:ipaddress(v4_only, etcd-network).address

  - name: etcd
    description: "etcd cluster service"
    jig: noop
    type: "BarclampCluster::ServiceRole"
    icon: "store"
    requires:
      - etcd-config
    flags:
      - milestone
    events:
      - endpoint: inproc://role:etcd/on_active
        selectors:
          - event: on_active
            obj_class: role
            obj_id: etcd
          - event: synch_on_delete
            obj_class: role
            obj_id: etcd
    wants-attribs:
      - etcd-port
      - etcd-network
    attribs:
      - name: etcd-addresses
        description: "The addresses of the etcd nodes"
        map: 'etcd/addresses'
        default: []
        schema:
          type: seq
          required: false
          sequence:
            - type: str
              pattern: /\[?[0-9a-f:.]*\]?:?[0-9]*/

